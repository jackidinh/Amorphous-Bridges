// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file PersonPublisher.cpp
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include "PersonPublisher.h"
#include "PersonPubSubTypes.h"

#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/publisher/Publisher.hpp>
#include <fastdds/dds/publisher/qos/PublisherQos.hpp>
#include <fastdds/dds/publisher/DataWriter.hpp>
#include <fastdds/dds/publisher/qos/DataWriterQos.hpp>

#include <thread>
#include <chrono>

#include <nng/nng.h>
#include <nng/protocol/pubsub0/sub.h>
#include <iostream>
#include <string>
#include "../testSchema.pb.h"

using namespace eprosima::fastdds::dds;

PersonPublisher::PersonPublisher()
    : participant_(nullptr)
    , publisher_(nullptr)
    , topic_(nullptr)
    , writer_(nullptr)
    , type_(new test_msgs_pkg::msg::PersonPubSubType())
{
}

PersonPublisher::~PersonPublisher()
{
    if (writer_ != nullptr)
    {
        publisher_->delete_datawriter(writer_);
    }
    if (publisher_ != nullptr)
    {
        participant_->delete_publisher(publisher_);
    }
    if (topic_ != nullptr)
    {
        participant_->delete_topic(topic_);
    }
    DomainParticipantFactory::get_instance()->delete_participant(participant_);
}

bool PersonPublisher::init()
{
    /* Initialize data_ here */

    //CREATE THE PARTICIPANT
    DomainParticipantQos pqos;
    pqos.name("Participant_pub");
    participant_ = DomainParticipantFactory::get_instance()->create_participant(0, pqos);
    if (participant_ == nullptr)
    {
        return false;
    }

    //REGISTER THE TYPE
    type_.register_type(participant_);

    //CREATE THE PUBLISHER
    publisher_ = participant_->create_publisher(PUBLISHER_QOS_DEFAULT, nullptr);
    if (publisher_ == nullptr)
    {
        return false;
    }

    //CREATE THE TOPIC
    topic_ = participant_->create_topic(
        "rt/person_topic",
        "test_msgs_pkg::msg::dds_::Person_",
        TOPIC_QOS_DEFAULT);
    if (topic_ == nullptr)
    {
        return false;
    }

    // CREATE THE WRITER
    writer_ = publisher_->create_datawriter(topic_, DATAWRITER_QOS_DEFAULT, &listener_);
    if (writer_ == nullptr)
    {
        return false;
    }

    std::cout << "test_msgs_pkg::msg::Person DataWriter created." << std::endl;
    return true;
}

void PersonPublisher::PubListener::on_publication_matched(
        eprosima::fastdds::dds::DataWriter*,
        const eprosima::fastdds::dds::PublicationMatchedStatus& info)
{
    if (info.current_count_change == 1)
    {
        matched = info.total_count;
        std::cout << "DataWriter matched." << std::endl;
    }
    else if (info.current_count_change == -1)
    {
        matched = info.total_count;
        std::cout << "DataWriter unmatched." << std::endl;
    }
    else
    {
        std::cout << info.current_count_change
                  << " is not a valid value for PublicationMatchedStatus current count change" << std::endl;
    }
}

void PersonPublisher::run()
{
    std::cout<<"Waiting to Connect to NNG Publisher\n";
    nng_socket sock;
    int rv;

    if ((rv = nng_sub0_open(&sock)) != 0) {
        std::cerr << "Failed to open sub socket\n";
    }

    if ((rv = nng_setopt(sock, NNG_OPT_SUB_SUBSCRIBE, "", 0)) != 0) {
        std::cerr << "Failed to set subscribe option\n";
        nng_close(sock);
    }

    if ((rv = nng_dial(sock, "tcp://127.0.0.1:5555", NULL, 0)) != 0) {
        std::cerr << "Failed to connect to publisher\n";
        nng_close(sock);
    }

    std::cout << "Connected to publisher. Waiting for messages...\n";

    std::cout << "test_msgs_pkg::msg::Person DataWriter waiting for DataReaders." << std::endl;
    while (listener_.matched == 0)
    {
        std::this_thread::sleep_for(std::chrono::milliseconds(250)); // Sleep 250 ms
    }
    // Message loop
    while (true)
    {
        char* buf = nullptr;
        size_t sz;

        if ((rv = nng_recv(sock, &buf, &sz, NNG_FLAG_ALLOC)) != 0) {
            std::cerr << "NNG receive failed: " << nng_strerror(rv) << "\n";
            continue;
        }

        std::string data(buf, sz); // You can parse this into your Person message
        nng_free(buf, sz);

        std::cout << "Data received from NNG: " << data << "\n";

        Person person;
        person.ParseFromString(data);

        // Fill DDS message from data (e.g., if it's JSON, parse it)
        test_msgs_pkg::msg::Person st;
        st.name() = person.name();               // Replace with parsed value
        st.id() = person.id();            // Replace with parsed value

        writer_->write(&st);
        std::cout << "Published Person message to Fast DDS\n";
    }

    nng_close(sock);
}
